# coding: utf-8

"""
    SensCritique Mobile API

    Unofficial SensCritique API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ListsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def lists_list_id_get(self, access_token, list_id, **kwargs):
        """
        Describe a list information (name, ...)
        Describe a list information (name, ...)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_get(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :return: ListDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_get_with_http_info(access_token, list_id, **kwargs)
        else:
            (data) = self.lists_list_id_get_with_http_info(access_token, list_id, **kwargs)
            return data

    def lists_list_id_get_with_http_info(self, access_token, list_id, **kwargs):
        """
        Describe a list information (name, ...)
        Describe a list information (name, ...)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_get_with_http_info(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :return: ListDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'list_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `lists_list_id_get`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_get`")

        resource_path = '/lists/{list_id}'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListDescriptionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def lists_list_id_get_0(self, access_token, list_id, **kwargs):
        """
        Get all the products of a list
        Get all the products of a list

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_get_0(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_get_0_with_http_info(access_token, list_id, **kwargs)
        else:
            (data) = self.lists_list_id_get_0_with_http_info(access_token, list_id, **kwargs)
            return data

    def lists_list_id_get_0_with_http_info(self, access_token, list_id, **kwargs):
        """
        Get all the products of a list
        Get all the products of a list

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_get_0_with_http_info(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'list_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `lists_list_id_get_0`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_get_0`")

        resource_path = '/lists/{list_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaginatedProductListResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def lists_list_id_products_get(self, access_token, list_id, **kwargs):
        """
        Get the products of a list
        Get all th product in a list. This method uses a limit/offset system to limit the results returned by the request.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_get(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int limit: The maximum number of product to return. Default to 20.
        :param int offset: The offset of the beginning of the list. Default to 0.
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_products_get_with_http_info(access_token, list_id, **kwargs)
        else:
            (data) = self.lists_list_id_products_get_with_http_info(access_token, list_id, **kwargs)
            return data

    def lists_list_id_products_get_with_http_info(self, access_token, list_id, **kwargs):
        """
        Get the products of a list
        Get all th product in a list. This method uses a limit/offset system to limit the results returned by the request.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_get_with_http_info(access_token, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int limit: The maximum number of product to return. Default to 20.
        :param int offset: The offset of the beginning of the list. Default to 0.
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'list_id', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_products_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `lists_list_id_products_get`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_products_get`")

        resource_path = '/lists/{list_id}/products'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaginatedProductListResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def lists_list_id_products_product_id_delete(self, list_id, product_id, **kwargs):
        """
        Remove a product from a list
        Remove the designated product in the list.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_delete(list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: SuccessStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_products_product_id_delete_with_http_info(list_id, product_id, **kwargs)
        else:
            (data) = self.lists_list_id_products_product_id_delete_with_http_info(list_id, product_id, **kwargs)
            return data

    def lists_list_id_products_product_id_delete_with_http_info(self, list_id, product_id, **kwargs):
        """
        Remove a product from a list
        Remove the designated product in the list.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_delete_with_http_info(list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: SuccessStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_products_product_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_products_product_id_delete`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `lists_list_id_products_product_id_delete`")

        resource_path = '/lists/{list_id}/products/{product_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessStatusResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def lists_list_id_products_product_id_post(self, access_token, list_id, product_id, **kwargs):
        """
        Add product to list
        Add a product (specified by productId) to the specified list (listId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_post(access_token, list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_products_product_id_post_with_http_info(access_token, list_id, product_id, **kwargs)
        else:
            (data) = self.lists_list_id_products_product_id_post_with_http_info(access_token, list_id, product_id, **kwargs)
            return data

    def lists_list_id_products_product_id_post_with_http_info(self, access_token, list_id, product_id, **kwargs):
        """
        Add product to list
        Add a product (specified by productId) to the specified list (listId)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_post_with_http_info(access_token, list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: PaginatedProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'list_id', 'product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_products_product_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `lists_list_id_products_product_id_post`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_products_product_id_post`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `lists_list_id_products_product_id_post`")

        resource_path = '/lists/{list_id}/products/{product_id}'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaginatedProductListResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def lists_list_id_products_product_id_post_0(self, access_token, list_id, product_id, **kwargs):
        """
        Add a product in a list
        Add the designated product in the list. If the list already contains the item it will not be re-add. Because the universe filtering is done client side, this method also allows to add items in a list even if their universe is different.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_post_0(access_token, list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: SuccessStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.lists_list_id_products_product_id_post_0_with_http_info(access_token, list_id, product_id, **kwargs)
        else:
            (data) = self.lists_list_id_products_product_id_post_0_with_http_info(access_token, list_id, product_id, **kwargs)
            return data

    def lists_list_id_products_product_id_post_0_with_http_info(self, access_token, list_id, product_id, **kwargs):
        """
        Add a product in a list
        Add the designated product in the list. If the list already contains the item it will not be re-add. Because the universe filtering is done client side, this method also allows to add items in a list even if their universe is different.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lists_list_id_products_product_id_post_0_with_http_info(access_token, list_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Authenticated token (required)
        :param int list_id: The id of a list (required)
        :param int product_id: The id of a product (required)
        :return: SuccessStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'list_id', 'product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_list_id_products_product_id_post_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `lists_list_id_products_product_id_post_0`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `lists_list_id_products_product_id_post_0`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `lists_list_id_products_product_id_post_0`")

        resource_path = '/lists/{list_id}/products/{product_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessStatusResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def users_me_lists_post(self, label, sub_universe, access_token, **kwargs):
        """
        Create a list for the given user
        Create a list for a specific user, with a Sub-Universe type (album, ...)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_me_lists_post(label, sub_universe, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str label: The name of the list (required)
        :param int sub_universe: The id of the sub universe attached to the list (required)
        :param str access_token: Authenticated token (required)
        :return: ListCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.users_me_lists_post_with_http_info(label, sub_universe, access_token, **kwargs)
        else:
            (data) = self.users_me_lists_post_with_http_info(label, sub_universe, access_token, **kwargs)
            return data

    def users_me_lists_post_with_http_info(self, label, sub_universe, access_token, **kwargs):
        """
        Create a list for the given user
        Create a list for a specific user, with a Sub-Universe type (album, ...)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_me_lists_post_with_http_info(label, sub_universe, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str label: The name of the list (required)
        :param int sub_universe: The id of the sub universe attached to the list (required)
        :param str access_token: Authenticated token (required)
        :return: ListCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['label', 'sub_universe', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_lists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'label' is set
        if ('label' not in params) or (params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `users_me_lists_post`")
        # verify the required parameter 'sub_universe' is set
        if ('sub_universe' not in params) or (params['sub_universe'] is None):
            raise ValueError("Missing the required parameter `sub_universe` when calling `users_me_lists_post`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `users_me_lists_post`")

        resource_path = '/users/me/lists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'label' in params:
            query_params['label'] = params['label']
        if 'sub_universe' in params:
            query_params['sub_universe'] = params['sub_universe']
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCreationResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
