# coding: utf-8

"""
    SensCritique Mobile API

    Unofficial SensCritique API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, title=None, year_of_production=None, release_date=None, release_date_stringify=None, production_status=None, creators=None, workers=None, genres=None, trailers=None, type_id=None, subtype_id=None, rating=None, rating_count=None, wish_list_count=None, list_position=None, list_description=None, length=None, list_item=None, current_user_data=None):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'title': 'str',
            'year_of_production': 'int',
            'release_date': 'str',
            'release_date_stringify': 'str',
            'production_status': 'str',
            'creators': 'str',
            'workers': 'str',
            'genres': 'str',
            'trailers': 'object',
            'type_id': 'int',
            'subtype_id': 'int',
            'rating': 'int',
            'rating_count': 'int',
            'wish_list_count': 'int',
            'list_position': 'int',
            'list_description': 'str',
            'length': 'int',
            'list_item': 'int',
            'current_user_data': 'ProductCurrentUserData'
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'year_of_production': 'year_of_production',
            'release_date': 'release_date',
            'release_date_stringify': 'release_date_stringify',
            'production_status': 'production_status',
            'creators': 'creators',
            'workers': 'workers',
            'genres': 'genres',
            'trailers': 'trailers',
            'type_id': 'type_id',
            'subtype_id': 'subtype_id',
            'rating': 'rating',
            'rating_count': 'rating_count',
            'wish_list_count': 'wish_list_count',
            'list_position': 'list_position',
            'list_description': 'list_description',
            'length': 'length',
            'list_item': 'list_item',
            'current_user_data': 'current_user_data'
        }

        self._id = id
        self._title = title
        self._year_of_production = year_of_production
        self._release_date = release_date
        self._release_date_stringify = release_date_stringify
        self._production_status = production_status
        self._creators = creators
        self._workers = workers
        self._genres = genres
        self._trailers = trailers
        self._type_id = type_id
        self._subtype_id = subtype_id
        self._rating = rating
        self._rating_count = rating_count
        self._wish_list_count = wish_list_count
        self._list_position = list_position
        self._list_description = list_description
        self._length = length
        self._list_item = list_item
        self._current_user_data = current_user_data

    @property
    def id(self):
        """
        Gets the id of this Product.
        Id of product (movie, music, ...)

        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.
        Id of product (movie, music, ...)

        :param id: The id of this Product.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this Product.
        Description of product.

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Product.
        Description of product.

        :param title: The title of this Product.
        :type: str
        """

        self._title = title

    @property
    def year_of_production(self):
        """
        Gets the year_of_production of this Product.
        Year of production

        :return: The year_of_production of this Product.
        :rtype: int
        """
        return self._year_of_production

    @year_of_production.setter
    def year_of_production(self, year_of_production):
        """
        Sets the year_of_production of this Product.
        Year of production

        :param year_of_production: The year_of_production of this Product.
        :type: int
        """

        self._year_of_production = year_of_production

    @property
    def release_date(self):
        """
        Gets the release_date of this Product.
        Realease date of the product

        :return: The release_date of this Product.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """
        Sets the release_date of this Product.
        Realease date of the product

        :param release_date: The release_date of this Product.
        :type: str
        """

        self._release_date = release_date

    @property
    def release_date_stringify(self):
        """
        Gets the release_date_stringify of this Product.
        Realease date of the product (technical)

        :return: The release_date_stringify of this Product.
        :rtype: str
        """
        return self._release_date_stringify

    @release_date_stringify.setter
    def release_date_stringify(self, release_date_stringify):
        """
        Sets the release_date_stringify of this Product.
        Realease date of the product (technical)

        :param release_date_stringify: The release_date_stringify of this Product.
        :type: str
        """

        self._release_date_stringify = release_date_stringify

    @property
    def production_status(self):
        """
        Gets the production_status of this Product.
        Production status of the product

        :return: The production_status of this Product.
        :rtype: str
        """
        return self._production_status

    @production_status.setter
    def production_status(self, production_status):
        """
        Sets the production_status of this Product.
        Production status of the product

        :param production_status: The production_status of this Product.
        :type: str
        """

        self._production_status = production_status

    @property
    def creators(self):
        """
        Gets the creators of this Product.
        Comma separated list of the creators of the product

        :return: The creators of this Product.
        :rtype: str
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """
        Sets the creators of this Product.
        Comma separated list of the creators of the product

        :param creators: The creators of this Product.
        :type: str
        """

        self._creators = creators

    @property
    def workers(self):
        """
        Gets the workers of this Product.
        Comma separated list of the people which works on the product

        :return: The workers of this Product.
        :rtype: str
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """
        Sets the workers of this Product.
        Comma separated list of the people which works on the product

        :param workers: The workers of this Product.
        :type: str
        """

        self._workers = workers

    @property
    def genres(self):
        """
        Gets the genres of this Product.
        Comma separated list of the \"genders\" of the product (Thriller, ...)

        :return: The genres of this Product.
        :rtype: str
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """
        Sets the genres of this Product.
        Comma separated list of the \"genders\" of the product (Thriller, ...)

        :param genres: The genres of this Product.
        :type: str
        """

        self._genres = genres

    @property
    def trailers(self):
        """
        Gets the trailers of this Product.
        Urls of the trailer (key = ???, value = url)

        :return: The trailers of this Product.
        :rtype: object
        """
        return self._trailers

    @trailers.setter
    def trailers(self, trailers):
        """
        Sets the trailers of this Product.
        Urls of the trailer (key = ???, value = url)

        :param trailers: The trailers of this Product.
        :type: object
        """

        self._trailers = trailers

    @property
    def type_id(self):
        """
        Gets the type_id of this Product.
        Id of the product universe

        :return: The type_id of this Product.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this Product.
        Id of the product universe

        :param type_id: The type_id of this Product.
        :type: int
        """

        self._type_id = type_id

    @property
    def subtype_id(self):
        """
        Gets the subtype_id of this Product.
        Id of the product sub-universe

        :return: The subtype_id of this Product.
        :rtype: int
        """
        return self._subtype_id

    @subtype_id.setter
    def subtype_id(self, subtype_id):
        """
        Sets the subtype_id of this Product.
        Id of the product sub-universe

        :param subtype_id: The subtype_id of this Product.
        :type: int
        """

        self._subtype_id = subtype_id

    @property
    def rating(self):
        """
        Gets the rating of this Product.
        NOT WORKING

        :return: The rating of this Product.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """
        Sets the rating of this Product.
        NOT WORKING

        :param rating: The rating of this Product.
        :type: int
        """

        self._rating = rating

    @property
    def rating_count(self):
        """
        Gets the rating_count of this Product.
        NOT WORKING

        :return: The rating_count of this Product.
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """
        Sets the rating_count of this Product.
        NOT WORKING

        :param rating_count: The rating_count of this Product.
        :type: int
        """

        self._rating_count = rating_count

    @property
    def wish_list_count(self):
        """
        Gets the wish_list_count of this Product.
        NOT WORKING

        :return: The wish_list_count of this Product.
        :rtype: int
        """
        return self._wish_list_count

    @wish_list_count.setter
    def wish_list_count(self, wish_list_count):
        """
        Sets the wish_list_count of this Product.
        NOT WORKING

        :param wish_list_count: The wish_list_count of this Product.
        :type: int
        """

        self._wish_list_count = wish_list_count

    @property
    def list_position(self):
        """
        Gets the list_position of this Product.
        ???

        :return: The list_position of this Product.
        :rtype: int
        """
        return self._list_position

    @list_position.setter
    def list_position(self, list_position):
        """
        Sets the list_position of this Product.
        ???

        :param list_position: The list_position of this Product.
        :type: int
        """

        self._list_position = list_position

    @property
    def list_description(self):
        """
        Gets the list_description of this Product.
        ???

        :return: The list_description of this Product.
        :rtype: str
        """
        return self._list_description

    @list_description.setter
    def list_description(self, list_description):
        """
        Sets the list_description of this Product.
        ???

        :param list_description: The list_description of this Product.
        :type: str
        """

        self._list_description = list_description

    @property
    def length(self):
        """
        Gets the length of this Product.
        ???

        :return: The length of this Product.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this Product.
        ???

        :param length: The length of this Product.
        :type: int
        """

        self._length = length

    @property
    def list_item(self):
        """
        Gets the list_item of this Product.
        ???

        :return: The list_item of this Product.
        :rtype: int
        """
        return self._list_item

    @list_item.setter
    def list_item(self, list_item):
        """
        Sets the list_item of this Product.
        ???

        :param list_item: The list_item of this Product.
        :type: int
        """

        self._list_item = list_item

    @property
    def current_user_data(self):
        """
        Gets the current_user_data of this Product.


        :return: The current_user_data of this Product.
        :rtype: ProductCurrentUserData
        """
        return self._current_user_data

    @current_user_data.setter
    def current_user_data(self, current_user_data):
        """
        Sets the current_user_data of this Product.


        :param current_user_data: The current_user_data of this Product.
        :type: ProductCurrentUserData
        """

        self._current_user_data = current_user_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
