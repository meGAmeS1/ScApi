# coding: utf-8

"""
    SensCritique Mobile API

    Unofficial SensCritique API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ListDescriptionResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, success=None, id=None, title=None, description=None, date_creation=None, user=None):
        """
        ListDescriptionResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'int',
            'success': 'bool',
            'id': 'int',
            'title': 'str',
            'description': 'str',
            'date_creation': 'str',
            'user': 'User'
        }

        self.attribute_map = {
            'code': 'code',
            'success': 'success',
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'date_creation': 'date_creation',
            'user': 'user'
        }

        self._code = code
        self._success = success
        self._id = id
        self._title = title
        self._description = description
        self._date_creation = date_creation
        self._user = user

    @property
    def code(self):
        """
        Gets the code of this ListDescriptionResponse.
        

        :return: The code of this ListDescriptionResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ListDescriptionResponse.
        

        :param code: The code of this ListDescriptionResponse.
        :type: int
        """

        self._code = code

    @property
    def success(self):
        """
        Gets the success of this ListDescriptionResponse.
        

        :return: The success of this ListDescriptionResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this ListDescriptionResponse.
        

        :param success: The success of this ListDescriptionResponse.
        :type: bool
        """

        self._success = success

    @property
    def id(self):
        """
        Gets the id of this ListDescriptionResponse.
        

        :return: The id of this ListDescriptionResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ListDescriptionResponse.
        

        :param id: The id of this ListDescriptionResponse.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this ListDescriptionResponse.
        

        :return: The title of this ListDescriptionResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ListDescriptionResponse.
        

        :param title: The title of this ListDescriptionResponse.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this ListDescriptionResponse.
        

        :return: The description of this ListDescriptionResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ListDescriptionResponse.
        

        :param description: The description of this ListDescriptionResponse.
        :type: str
        """

        self._description = description

    @property
    def date_creation(self):
        """
        Gets the date_creation of this ListDescriptionResponse.
        

        :return: The date_creation of this ListDescriptionResponse.
        :rtype: str
        """
        return self._date_creation

    @date_creation.setter
    def date_creation(self, date_creation):
        """
        Sets the date_creation of this ListDescriptionResponse.
        

        :param date_creation: The date_creation of this ListDescriptionResponse.
        :type: str
        """

        self._date_creation = date_creation

    @property
    def user(self):
        """
        Gets the user of this ListDescriptionResponse.


        :return: The user of this ListDescriptionResponse.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ListDescriptionResponse.


        :param user: The user of this ListDescriptionResponse.
        :type: User
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
