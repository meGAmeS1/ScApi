# coding: utf-8

"""
    SensCritique Mobile API

    Unofficial SensCritique API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AuthenticationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nonce=None, email=None, password=None, token_id=None):
        """
        AuthenticationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nonce': 'str',
            'email': 'str',
            'password': 'str',
            'token_id': 'str'
        }

        self.attribute_map = {
            'nonce': 'nonce',
            'email': 'email',
            'password': 'password',
            'token_id': 'token_id'
        }

        self._nonce = nonce
        self._email = email
        self._password = password
        self._token_id = token_id

    @property
    def nonce(self):
        """
        Gets the nonce of this AuthenticationRequest.
        # How to generate nonce: password_md5 = md5(user_password) # Use token as hashing key nonce = md5(user_email + password_md5, token) 

        :return: The nonce of this AuthenticationRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """
        Sets the nonce of this AuthenticationRequest.
        # How to generate nonce: password_md5 = md5(user_password) # Use token as hashing key nonce = md5(user_email + password_md5, token) 

        :param nonce: The nonce of this AuthenticationRequest.
        :type: str
        """

        self._nonce = nonce

    @property
    def email(self):
        """
        Gets the email of this AuthenticationRequest.
        The user email used to login

        :return: The email of this AuthenticationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this AuthenticationRequest.
        The user email used to login

        :param email: The email of this AuthenticationRequest.
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this AuthenticationRequest.
        The user passord used to login

        :return: The password of this AuthenticationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this AuthenticationRequest.
        The user passord used to login

        :param password: The password of this AuthenticationRequest.
        :type: str
        """

        self._password = password

    @property
    def token_id(self):
        """
        Gets the token_id of this AuthenticationRequest.
        The id of the request_token to authenticate

        :return: The token_id of this AuthenticationRequest.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """
        Sets the token_id of this AuthenticationRequest.
        The id of the request_token to authenticate

        :param token_id: The token_id of this AuthenticationRequest.
        :type: str
        """

        self._token_id = token_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
